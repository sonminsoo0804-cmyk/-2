{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "78dcbca7-6495-4d74-8be1-0c133f6f9fdf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'%.3f'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "#Jupyter Notebook의 출력을 소수점 이하 3자리로 제한\n",
    "%precision 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a88ecb07-43ff-4dc4-af98-84c50a375efd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>english</th>\n",
       "      <th>mathematics</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>student number</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>42</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>69</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>56</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>41</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>57</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                english  mathematics\n",
       "student number                      \n",
       "1                    42           65\n",
       "2                    69           80\n",
       "3                    56           63\n",
       "4                    41           63\n",
       "5                    57           76"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(r'C:\\Users\\손민수\\Desktop\\analysist\\ana\\ch2_scores_em.csv',\n",
    "                index_col='student number')\n",
    "# df의 처음 5행을 표시\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f5798f6f-d596-4cfa-9482-95e608dd5133",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([42, 69, 56, 41, 57, 48, 65, 49, 65, 58])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores = np.array(df['english'])[:10]\n",
    "scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1b6d6afe-d69a-4a32-a770-8ec58be4b746",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>student</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>H</th>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>I</th>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>J</th>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         score\n",
       "student       \n",
       "A           42\n",
       "B           69\n",
       "C           56\n",
       "D           41\n",
       "E           57\n",
       "F           48\n",
       "G           65\n",
       "H           49\n",
       "I           65\n",
       "J           58"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores_df = pd.DataFrame({'score':scores},\n",
    "                        index=pd.Index(['A','B','C','D','E',\n",
    "                                                'F','G','H','I','J'],\n",
    "                                        name='student'))\n",
    "scores_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7462fa83-f31a-443a-8b8d-52358ceb9745",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "55.000"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(scores) / len(scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1829574d-b2f8-45a7-9c6f-5cf1573ee2cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "55.000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "94b73cd9-6784-46c0-972c-f6524889bb20",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "score    55.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores_df.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "85d9e547-7efc-410c-9f59-4e1cab8c4acd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([41, 42, 48, 49, 56, 57, 58, 65, 65, 69])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_scores = np.sort(scores)\n",
    "sorted_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bed0ca26-a9c4-4e92-ba68-f571dfd52c50",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "56.500"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n = len(sorted_scores)\n",
    "if n % 2 == 0:\n",
    "    m0 = sorted_scores[n//2 - 1 ]\n",
    "    m1 = sorted_scores[n//2]\n",
    "    median = (m0 + m1) / 2\n",
    "else:\n",
    "    median = sorted_scores[(n+1)//2 - 1]\n",
    "median"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "be93273d-9615-40e8-b793-79df33822594",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "56.500"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.median(scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5b93e495-cfe5-4bb7-92a3-780613c53faa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "score    56.5\n",
       "dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores_df.median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "10713e18-40c9-4d58-8022-66872b9f2d15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series([1, 1, 1, 2, 2, 3]).mode()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3c9a82f7-743f-405c-81c9-a59e958a3310",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1\n",
       "1    2\n",
       "2    3\n",
       "3    4\n",
       "4    5\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series([1, 2, 3, 4, 5]).mode()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "582e54e4-4497-4e95-aee3-dc5320882591",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-13.,  14.,   1., -14.,   2.,  -7.,  10.,  -6.,  10.,   3.])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean = np.mean(scores)\n",
    "deviation = scores - mean\n",
    "deviation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1549ee4e-060f-4ab8-83fc-69daa20d5630",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-13.,  14.,   1., -14.,   2.,  -7.,  10.,  -6.,  10.,   3.])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean = np.mean(scores)\n",
    "deviation = scores - mean\n",
    "deviation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fe75e40a-6ffc-432a-a93e-a23e4e2762ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-5.,  5.,  3., -1., -4.,  1.,  2., -2., -3.,  4.])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "another_scores = [50, 60, 58, 54, 51, 56, 57, 53, 52, 59]\n",
    "another_mean = np.mean(another_scores)\n",
    "another_deviation = another_scores - another_mean\n",
    "another_deviation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "72bbe4c2-2e5c-408d-ad8b-b6b6398e8eeb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.000"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(deviation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4319389b-a8dd-46bb-a704-f4fd1f0e5c63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.000"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(another_deviation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fd081f61-4c86-4626-aceb-25fa42b296bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>score</th>\n",
       "      <th>deviation</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>student</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>42</td>\n",
       "      <td>-13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>69</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>56</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>41</td>\n",
       "      <td>-14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>57</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>48</td>\n",
       "      <td>-7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>65</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>H</th>\n",
       "      <td>49</td>\n",
       "      <td>-6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>I</th>\n",
       "      <td>65</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>J</th>\n",
       "      <td>58</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         score  deviation\n",
       "student                  \n",
       "A           42      -13.0\n",
       "B           69       14.0\n",
       "C           56        1.0\n",
       "D           41      -14.0\n",
       "E           57        2.0\n",
       "F           48       -7.0\n",
       "G           65       10.0\n",
       "H           49       -6.0\n",
       "I           65       10.0\n",
       "J           58        3.0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summary_df = scores_df.copy()\n",
    "summary_df['deviation'] = deviation\n",
    "summary_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "98397028-d881-4b97-b5ca-04a9582d77a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "score        55.0\n",
       "deviation     0.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summary_df.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "669b8d5e-af47-48da-a6de-73bf5f8eaf9d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "86.000"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(deviation ** 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2ec154d8-d439-474c-b81a-2fbf097b48f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "86.000"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.var(scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5b0b4faa-5ba2-4581-9fc2-f6000299b0ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "score    95.555556\n",
       "dtype: float64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores_df.var()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "5be201e3-0836-4e56-89c4-499b97461ef6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>score</th>\n",
       "      <th>deviation</th>\n",
       "      <th>square of deviation</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>student</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>42</td>\n",
       "      <td>-13.0</td>\n",
       "      <td>169.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>69</td>\n",
       "      <td>14.0</td>\n",
       "      <td>196.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>56</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>41</td>\n",
       "      <td>-14.0</td>\n",
       "      <td>196.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>57</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>48</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>65</td>\n",
       "      <td>10.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>H</th>\n",
       "      <td>49</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>I</th>\n",
       "      <td>65</td>\n",
       "      <td>10.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>J</th>\n",
       "      <td>58</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         score  deviation  square of deviation\n",
       "student                                       \n",
       "A           42      -13.0                169.0\n",
       "B           69       14.0                196.0\n",
       "C           56        1.0                  1.0\n",
       "D           41      -14.0                196.0\n",
       "E           57        2.0                  4.0\n",
       "F           48       -7.0                 49.0\n",
       "G           65       10.0                100.0\n",
       "H           49       -6.0                 36.0\n",
       "I           65       10.0                100.0\n",
       "J           58        3.0                  9.0"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summary_df['square of deviation'] = np.square(deviation)\n",
    "summary_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f72d75ed-cf67-448e-850e-29b1eece8f0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "score                  55.0\n",
       "deviation               0.0\n",
       "square of deviation    86.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summary_df.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7cc61cc9-24dc-4f44-8467-0afa110007f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.274"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(np.var(scores, ddof=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "dad4cce4-93b0-40e6-a1dd-62536b2c8bac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.274"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.std(scores, ddof=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "dec00cb1-a959-4acd-afda-77aadf0d8173",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.int64(28)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.max(scores) - np.min(scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "ed920644-093e-4091-b3bb-c2a4bd68ca18",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15.000"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores_Q1 = np.percentile(scores, 25)\n",
    "scores_Q3 = np.percentile(scores, 75)\n",
    "scores_IQR = scores_Q3 - scores_Q1\n",
    "scores_IQR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "62d2c23b-3576-460d-bb7a-b8ee2bc0e6d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    10.000000\n",
       "mean     55.000000\n",
       "std       9.775252\n",
       "min      41.000000\n",
       "25%      48.250000\n",
       "50%      56.500000\n",
       "75%      63.250000\n",
       "max      69.000000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series(scores).describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "f50dcf79-d3e0-4a05-8906-3894aaba820c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1.402,  1.51 ,  0.108, -1.51 ,  0.216, -0.755,  1.078, -0.647,\n",
       "        1.078,  0.323])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z = (scores - np.mean(scores)) / np.std(scores)\n",
    "z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "47bd752f-24f8-4498-add5-52eec704251e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-0.000, 1.000)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(z), np.std(z, ddof=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a8388009-aac0-4ea8-8fb4-cd9ef84e9917",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([35.982, 65.097, 51.078, 34.903, 52.157, 42.452, 60.783, 43.53 ,\n",
       "       60.783, 53.235])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z = 50 + 10 * (scores - np.mean(scores)) / np.std(scores)\n",
    "z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6ca8d5c7-eabe-4432-8bd4-8456e425ef02",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>score</th>\n",
       "      <th>deviation value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>student</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>42</td>\n",
       "      <td>35.981739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>69</td>\n",
       "      <td>65.096588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>56</td>\n",
       "      <td>51.078328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>41</td>\n",
       "      <td>34.903412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>57</td>\n",
       "      <td>52.156655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>48</td>\n",
       "      <td>42.451706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>65</td>\n",
       "      <td>60.783277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>H</th>\n",
       "      <td>49</td>\n",
       "      <td>43.530034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>I</th>\n",
       "      <td>65</td>\n",
       "      <td>60.783277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>J</th>\n",
       "      <td>58</td>\n",
       "      <td>53.234983</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         score  deviation value\n",
       "student                        \n",
       "A           42        35.981739\n",
       "B           69        65.096588\n",
       "C           56        51.078328\n",
       "D           41        34.903412\n",
       "E           57        52.156655\n",
       "F           48        42.451706\n",
       "G           65        60.783277\n",
       "H           49        43.530034\n",
       "I           65        60.783277\n",
       "J           58        53.234983"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores_df['deviation value'] = z\n",
    "scores_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b30ad687-7ab6-4b8e-bdaf-a02aa2a49861",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    50.000000\n",
       "mean     58.380000\n",
       "std       9.799813\n",
       "min      37.000000\n",
       "25%      54.000000\n",
       "50%      57.500000\n",
       "75%      65.000000\n",
       "max      79.000000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 50명의 영어 점수 array\n",
    "english_scores = np.array(df['english'])\n",
    "# Series로 변환하여 describe를 표시\n",
    "pd.Series(english_scores).describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ac617dab-7f52-4ded-ae6c-556fb136225f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  0,  0,  2,  8, 16, 18,  6,  0,  0])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq,_ = np.histogram(english_scores, bins=10, range=(0, 100))\n",
    "freq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "23440773-46dd-41e7-aec8-099cf8f07970",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>frequency</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>class</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0~10</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10~20</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20~30</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30~40</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40~50</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50~60</th>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60~70</th>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70~80</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80~90</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90~100</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        frequency\n",
       "class            \n",
       "0~10            0\n",
       "10~20           0\n",
       "20~30           0\n",
       "30~40           2\n",
       "40~50           8\n",
       "50~60          16\n",
       "60~70          18\n",
       "70~80           6\n",
       "80~90           0\n",
       "90~100          0"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 0~10, 10~20, ... 이라는 문자열의 리스트를 작성\n",
    "freq_class = [f'{i}~{i+10}' for i in range(0, 100, 10)]\n",
    "# freq_class를 인덱스로 DataFrame을 작성\n",
    "freq_dist_df = pd.DataFrame({'frequency':freq},\n",
    "                            index=pd.Index(freq_class,\n",
    "                                           name='class'))\n",
    "freq_dist_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "5c65b5ec-2b86-4760-96f3-df7efd8c403b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "for a in range(7):\n",
    "    print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "aaafb12b-5bad-4f4b-ae3d-257b21be9ceb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "9\n",
      "8\n",
      "7\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "for a in range(10, 5, -1):\n",
    "    print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "fd675adf-0a07-45f2-8cf1-7e37a91fd382",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20\n",
      "22\n",
      "24\n",
      "26\n",
      "28\n",
      "30\n"
     ]
    }
   ],
   "source": [
    "for a in range(20, 31, 2):\n",
    "    print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "386eca85-daba-4bb0-88b0-8a0baf67b4ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45\n"
     ]
    }
   ],
   "source": [
    "total = 0\n",
    "for i in range(1, 10):\n",
    "    total = total + i\n",
    "print(total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "e6b93619-a737-434c-8a0e-c61d1b0f456b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25\n"
     ]
    }
   ],
   "source": [
    "total = 0\n",
    "for i in range(1, 10, 2):\n",
    "    total = total + i\n",
    "print(total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "87f467d2-a107-4280-a639-a868aa38338b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[5, 15, 25, 35, 45, 55, 65, 75, 85, 95]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class_value = [(i+(i+10))//2 for i in range(0, 100, 10)]\n",
    "class_value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "bdee0b67-a110-4a58-97dc-a9d3ed53ec5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.  , 0.  , 0.  , 0.04, 0.16, 0.32, 0.36, 0.12, 0.  , 0.  ])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rel_freq = freq / freq.sum()\n",
    "rel_freq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "c80b67bc-2b3d-4ee6-a0ce-07e304d4353c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.  , 0.  , 0.  , 0.04, 0.2 , 0.52, 0.88, 1.  , 1.  , 1.  ])"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cum_rel_freq = np.cumsum(rel_freq)\n",
    "cum_rel_freq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "ccde832a-34fc-491d-8b60-c0164a46813b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>class value</th>\n",
       "      <th>frequency</th>\n",
       "      <th>relative frequency</th>\n",
       "      <th>cumulative relative frequency</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>class</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0~10</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10~20</th>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20~30</th>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30~40</th>\n",
       "      <td>35</td>\n",
       "      <td>2</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40~50</th>\n",
       "      <td>45</td>\n",
       "      <td>8</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50~60</th>\n",
       "      <td>55</td>\n",
       "      <td>16</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60~70</th>\n",
       "      <td>65</td>\n",
       "      <td>18</td>\n",
       "      <td>0.36</td>\n",
       "      <td>0.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70~80</th>\n",
       "      <td>75</td>\n",
       "      <td>6</td>\n",
       "      <td>0.12</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80~90</th>\n",
       "      <td>85</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90~100</th>\n",
       "      <td>95</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        class value  frequency  relative frequency  \\\n",
       "class                                                \n",
       "0~10              5          0                0.00   \n",
       "10~20            15          0                0.00   \n",
       "20~30            25          0                0.00   \n",
       "30~40            35          2                0.04   \n",
       "40~50            45          8                0.16   \n",
       "50~60            55         16                0.32   \n",
       "60~70            65         18                0.36   \n",
       "70~80            75          6                0.12   \n",
       "80~90            85          0                0.00   \n",
       "90~100           95          0                0.00   \n",
       "\n",
       "        cumulative relative frequency  \n",
       "class                                  \n",
       "0~10                             0.00  \n",
       "10~20                            0.00  \n",
       "20~30                            0.00  \n",
       "30~40                            0.04  \n",
       "40~50                            0.20  \n",
       "50~60                            0.52  \n",
       "60~70                            0.88  \n",
       "70~80                            1.00  \n",
       "80~90                            1.00  \n",
       "90~100                           1.00  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq_dist_df['class value'] = class_value\n",
    "freq_dist_df['relative frequency'] = rel_freq\n",
    "freq_dist_df['cumulative relative frequency'] = cum_rel_freq\n",
    "freq_dist_df = freq_dist_df[['class value', 'frequency',\n",
    "                             'relative frequency', 'cumulative relative frequency']]\n",
    "freq_dist_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "5ae073db-86b7-420b-8623-3a10e4c6b8ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Matplotlib의 pyplot 모듈을 plt라는 이름으로 임포트\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# 그래프가 notebook 위에 표시\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "bef982b2-0da3-4bea-b7d7-3f0a0aef5226",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#캔버스를 생성\n",
    "#figsie로 가로 세로 크기를 지정\n",
    "fig = plt.figure(figsize=(10,6))\n",
    "#캔버스 위에 그래프ㅡㄹ 그리기 위한 영역을 지정\n",
    "#인수는 영역을 1X1개 지정, 하나의 영역에 그린다는 것을의미\n",
    "ax = fig.add_subplot(111)\n",
    "\n",
    "# 계급수를 10으로 하여 히스토그램을 그림\n",
    "freq, _, _ = ax.hist(english_scores, bins=10, range=(0, 100))\n",
    "# X축에 레이블부여\n",
    "ax.set_xlabel('score')\n",
    "# Y축에 레이블 부여\n",
    "ax.set_ylabel('person number')\n",
    "# X축을 0, 10, 20, ..., 100 눈금으로 구분\n",
    "ax.set_xticks(np.arange(0, freq.max()+1))\n",
    "# 그래프 표시\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "73768451-a209-4dd7-9b0a-00c1bb9f2725",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0oAAAINCAYAAAAA8I+NAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAOWdJREFUeJzt3XmUVOWZP/Cn2RokgBFlaUVAcUUhEU0G9ScuiEEEjRM1LhE1Rk1QNCQqqIlAREwmKhOdkGiMmhiXTFzGiUZForgrskRQR0FAEEEyo3aDmhbo9/dHDn3sy9JdUNVVtJ/POXVO6q1b9TwVn66qL7furbKUUgoAAABqNSt2AwAAAKVGUAIAAMgQlAAAADIEJQAAgAxBCQAAIENQAgAAyBCUAAAAMgQlAACAjBbFbqDQampq4t1334127dpFWVlZsdsBAACKJKUUK1eujIqKimjWbNP7jJp8UHr33XejW7duxW4DAAAoEUuWLImddtppk9s0+aDUrl27iPjn/xnt27cvcjcAAECxVFVVRbdu3WozwqY0+aC07ut27du3F5QAAIAGHZLjZA4AAAAZghIAAECGoAQAAJAhKAEAAGQISgAAABmCEgAAQIagBAAAkCEoAQAAZAhKAAAAGYISAABAhqAEAACQISgBAABkCEoAAAAZghIAAECGoAQAAJBR1KD01FNPxdChQ6OioiLKysrigQceqHN7SinGjh0bFRUV0aZNmzj00EPj1VdfLU6zAADA50ZRg9JHH30Uffv2jRtvvHGDt//sZz+L6667Lm688caYPn16dOnSJY488shYuXJlI3cKAAB8nrQoZvHBgwfH4MGDN3hbSikmTZoUl19+eRx//PEREXH77bdH586d484774xzzz23MVsFAAA+R0r2GKWFCxfG8uXLY9CgQbVr5eXlMWDAgHjuuec2er/q6uqoqqqqcwEAAMhFUfcobcry5csjIqJz58511jt37hxvv/32Ru83ceLEGDduXEF7AwA2X4/RDzVqvUXXDGnUekDTULJ7lNYpKyurcz2ltN7aZ40ZMyYqKytrL0uWLCl0iwAAQBNTsnuUunTpEhH/3LPUtWvX2vUVK1ast5fps8rLy6O8vLzg/QEAAE1Xye5R6tmzZ3Tp0iWmTJlSu/bpp5/GtGnT4sADDyxiZwAAQFNX1D1Kq1ativnz59deX7hwYcyePTu222672HnnneOiiy6Kq6++OnbbbbfYbbfd4uqrr45tttkmTjnllCJ2DQAANHVFDUovv/xyHHbYYbXXR40aFRERw4cPj9tuuy0uueSS+OSTT+J73/tefPDBB/HVr341HnvssWjXrl2xWgYAAD4HylJKqdhNFFJVVVV06NAhKisro3379sVuBwA+95z1DiiWXLJByR6jBAAAUCyCEgAAQIagBAAAkCEoAQAAZAhKAAAAGYISAABAhqAEAACQISgBAABkCEoAAAAZghIAAECGoAQAAJAhKAEAAGQISgAAABmCEgAAQIagBAAAkCEoAQAAZAhKAAAAGYISAABAhqAEAACQISgBAABkCEoAAAAZghIAAECGoAQAAJAhKAEAAGQISgAAABmCEgAAQIagBAAAkCEoAQAAZAhKAAAAGYISAABAhqAEAACQISgBAABkCEoAAAAZJR+UVq5cGRdddFF079492rRpEwceeGBMnz692G0BAABNWMkHpbPPPjumTJkSv//972POnDkxaNCgGDhwYCxdurTYrQEAAE1USQelTz75JO6999742c9+Foccckj06tUrxo4dGz179ozJkycXuz0AAKCJalHsBjZlzZo1sXbt2mjdunWd9TZt2sQzzzyzwftUV1dHdXV17fWqqqqC9ggAADQ9Jb1HqV27dtG/f//4yU9+Eu+++26sXbs27rjjjnjxxRdj2bJlG7zPxIkTo0OHDrWXbt26NXLXAADA1q6kg1JExO9///tIKcWOO+4Y5eXl8Ytf/CJOOeWUaN68+Qa3HzNmTFRWVtZelixZ0sgdAwAAW7uS/updRMSuu+4a06ZNi48++iiqqqqia9eucdJJJ0XPnj03uH15eXmUl5c3cpcAAEBTUvJ7lNZp27ZtdO3aNT744IN49NFH49hjjy12SwAAQBNV8nuUHn300UgpxR577BHz58+Piy++OPbYY48488wzi90aAADQRJX8HqXKysoYMWJE7LnnnnH66afHwQcfHI899li0bNmy2K0BAABNVMnvUTrxxBPjxBNPLHYbAADA50jJ71ECAABobIISAABAhqAEAACQISgBAABkCEoAAAAZghIAAECGoAQAAJAhKAEAAGQISgAAABmCEgAAQIagBAAAkCEoAQAAZAhKAAAAGYISAABAhqAEAACQISgBAABkCEoAAAAZghIAAECGoAQAAJAhKAEAAGQISgAAABmCEgAAQIagBAAAkCEoAQAAZAhKAAAAGYISAABAhqAEAACQISgBAABkCEoAAAAZghIAAECGoAQAAJAhKAEAAGQISgAAABklHZTWrFkTV1xxRfTs2TPatGkTu+yyS4wfPz5qamqK3RoAANCEtSh2A5vy05/+NH71q1/F7bffHr17946XX345zjzzzOjQoUNceOGFxW4PAABooko6KD3//PNx7LHHxpAhQyIiokePHnHXXXfFyy+/XOTOAACApqykv3p38MEHx9SpU+PNN9+MiIi//e1v8cwzz8TRRx+90ftUV1dHVVVVnQsAAEAuSnqP0qWXXhqVlZWx5557RvPmzWPt2rUxYcKEOPnkkzd6n4kTJ8a4ceMasUsAyK8eox9q1HqLrhnSqPUAtgYlvUfpnnvuiTvuuCPuvPPOmDlzZtx+++3x85//PG6//faN3mfMmDFRWVlZe1myZEkjdgwAADQFJb1H6eKLL47Ro0fHN7/5zYiI2HfffePtt9+OiRMnxvDhwzd4n/Ly8igvL2/MNgEAgCampPcoffzxx9GsWd0Wmzdv7vTgAABAQZX0HqWhQ4fGhAkTYuedd47evXvHrFmz4rrrrouzzjqr2K0BAABNWEkHpRtuuCF+9KMfxfe+971YsWJFVFRUxLnnnhs//vGPi90aAADQhJV0UGrXrl1MmjQpJk2aVOxWAACAz5GSPkYJAACgGAQlAACADEEJAAAgQ1ACAADIEJQAAAAyBCUAAIAMQQkAACBDUAIAAMgQlAAAADIEJQAAgAxBCQAAIENQAgAAyBCUAAAAMgQlAACADEEJAAAgQ1ACAADIEJQAAAAyBCUAAIAMQQkAACBDUAIAAMgQlAAAADIEJQAAgAxBCQAAIENQAgAAyBCUAAAAMgQlAACADEEJAAAgQ1ACAADIEJQAAAAyBCUAAIAMQQkAACBDUAIAAMgQlAAAADJKPij16NEjysrK1ruMGDGi2K0BAABNVItiN1Cf6dOnx9q1a2uvz507N4488sg44YQTitgVAADQlJV8UNphhx3qXL/mmmti1113jQEDBhSpIwAAoKkr+aD0WZ9++mnccccdMWrUqCgrK9vgNtXV1VFdXV17vaqqqrHaAwAAmoitKig98MAD8eGHH8YZZ5yx0W0mTpwY48aNa7ymAGjyeox+qNgtANDISv5kDp91yy23xODBg6OiomKj24wZMyYqKytrL0uWLGnEDgEAgKZgq9mj9Pbbb8fjjz8e99133ya3Ky8vj/Ly8kbqCgAAaIq2mj1Kt956a3Tq1CmGDBlS7FYAAIAmbqsISjU1NXHrrbfG8OHDo0WLrWYnGAAAsJXaKoLS448/HosXL46zzjqr2K0AAACfA1vF7plBgwZFSqnYbQAAAJ8TW8UeJQAAgMYkKAEAAGQISgAAABmCEgAAQIagBAAAkCEoAQAAZAhKAAAAGYISAABAhqAEAACQISgBAABkCEoAAAAZghIAAECGoAQAAJAhKAEAAGQISgAAABmCEgAAQIagBAAAkCEoAQAAZOQUlNasWRMtWrSIuXPnFqofAACAosspKLVo0SK6d+8ea9euLVQ/AAAARZfzV++uuOKKGDNmTLz//vuF6AcAAKDoWuR6h1/84hcxf/78qKioiO7du0fbtm3r3D5z5sy8NQcAAFAMOQel4447rgBtAAAAlI6cg9KVV15ZiD4AAABKxmadHvzDDz+M3/zmN3WOVZo5c2YsXbo0r80BAAAUQ857lF555ZUYOHBgdOjQIRYtWhTf+c53Yrvttov7778/3n777fjd735XiD4BAAAaTc57lEaNGhVnnHFGzJs3L1q3bl27Pnjw4Hjqqafy2hwAAEAx5ByUpk+fHueee+566zvuuGMsX748L00BAAAUU85BqXXr1lFVVbXe+htvvBE77LBDXpoCAAAoppyD0rHHHhvjx4+P1atXR0REWVlZLF68OEaPHh3/+q//mvcGAQAAGlvOQennP/95/P3vf49OnTrFJ598EgMGDIhevXpFu3btYsKECYXoEQAAoFHlfNa79u3bxzPPPBN//etfY+bMmVFTUxP77bdfDBw4sBD9AQAANLqcg9I6hx9+eBx++OH57AUAAKAkbNYPzk6dOjWOOeaY2HXXXaNXr15xzDHHxOOPP57v3iIiYunSpXHaaadFx44dY5tttokvfelLMWPGjILUAgAAiNiMoHTjjTfG1772tWjXrl1ceOGFMXLkyGjfvn0cffTRceONN+a1uQ8++CAOOuigaNmyZfzlL3+J1157La699trYdttt81oHAADgs3L+6t3EiRPj+uuvj/PPP792beTIkXHQQQfFhAkT6qxvqZ/+9KfRrVu3uPXWW2vXevTokbfHBwAA2JCc9yhVVVXF1772tfXWBw0atMHfV9oSDz74YOy///5xwgknRKdOneLLX/5y3HzzzZu8T3V1dVRVVdW5AAAA5CLnPUrDhg2L+++/Py6++OI66//1X/8VQ4cOzVtjERELFiyIyZMnx6hRo+Kyyy6Ll156KUaOHBnl5eVx+umnb/A+EydOjHHjxuW1DwBoynqMfqjYLQCUnLKUUqpvo1/84he1/7uqqip+/vOfx0EHHRT9+/ePiIgXXnghnn322fjBD34QV1xxRd6aa9WqVey///7x3HPP1a6NHDkypk+fHs8///wG71NdXR3V1dV1+u3WrVtUVlZG+/bt89YbAJ8fgsTWbdE1Q4rdAlAiqqqqokOHDg3KBg3ao3T99dfXuf7FL34xXnvttXjttddq17bddtv47W9/m9eg1LVr19h7773rrO21115x7733bvQ+5eXlUV5enrceAACAz58GBaWFCxcWuo8NOuigg+KNN96os/bmm29G9+7di9IPAADw+bBZv6PUWL7//e/HCy+8EFdffXXMnz8/7rzzzrjppptixIgRxW4NAABownI+mUNKKf70pz/FE088EStWrIiampo6t9933315a+6AAw6I+++/P8aMGRPjx4+Pnj17xqRJk+LUU0/NWw0AAICsnIPShRdeGDfddFMcdthh0blz5ygrKytEX7WOOeaYOOaYYwpaAwAA4LNyDkp33HFH3HfffXH00UcXoh8AAICiy/kYpQ4dOsQuu+xSiF4AAABKQs5BaezYsTFu3Lj45JNPCtEPAABA0eX81bsTTjgh7rrrrujUqVP06NEjWrZsWef2mTNn5q05AACAYsg5KJ1xxhkxY8aMOO200xrlZA4AAACNLeeg9NBDD8Wjjz4aBx98cCH6AQAAKLqcj1Hq1q1btG/fvhC9AAAAlIScg9K1114bl1xySSxatKgA7QAAABRfzl+9O+200+Ljjz+OXXfdNbbZZpv1Tubw/vvv5605AACAYsg5KE2aNKkAbQAAAJSOnIPS8OHDC9EHAABAycg5KC1evHiTt++8886b3QwAAEApyDko9ejRY5O/nbR27dotaggAAKDYcg5Ks2bNqnN99erVMWvWrLjuuutiwoQJeWsMAACgWHIOSn379l1vbf/994+Kior4t3/7tzj++OPz0hgAAECx5Pw7Shuz++67x/Tp0/P1cAAAAEWT8x6lqqqqOtdTSrFs2bIYO3Zs7LbbbnlrDAAAoFhyDkrbbrvteidzSClFt27d4u67785bYwAAAMWSc1B64okn6lxv1qxZ7LDDDtGrV69o0SLnhwMAACg5OSebAQMGFKIPAACAkrFZu4DefPPNePLJJ2PFihVRU1NT57Yf//jHeWkMAACgWHIOSjfffHN897vfje233z66dOlS53ilsrIyQQkAANjq5RyUrrrqqpgwYUJceumlhegHAACg6HL+HaUPPvggTjjhhEL0AgAAUBJyDkonnHBCPPbYY4XoBQAAoCTk/NW7Xr16xY9+9KN44YUXYt99942WLVvWuX3kyJF5aw4AAKAYylJKKZc79OzZc+MPVlYWCxYs2OKm8qmqqio6dOgQlZWV0b59+2K3A8BWqMfoh4rdAltg0TVDit0CUCJyyQY571FauHDhZjcGAACwNcj5GCUAAICmTlACAADIEJQAAAAyBCUAAIAMQQkAACAj57PeRUR8+OGH8dJLL8WKFSuipqamzm2nn356XhqLiBg7dmyMGzeuzlrnzp1j+fLleasBAACQlXNQ+u///u849dRT46OPPop27dpFWVlZ7W1lZWV5DUoREb17947HH3+89nrz5s3z+vgAAABZOQelH/zgB3HWWWfF1VdfHdtss00heqqjRYsW0aVLl4LXAQAAWCfnY5SWLl0aI0eObJSQFBExb968qKioiJ49e8Y3v/nNWLBgwSa3r66ujqqqqjoXAACAXOS8R+moo46Kl19+OXbZZZdC9FPHV7/61fjd734Xu+++e7z33ntx1VVXxYEHHhivvvpqdOzYcYP3mThx4nrHNQEAn189Rj/U6DUXXTOk0WsC+VWWUkq53OGWW26J8ePHx5lnnhn77rtvtGzZss7tw4YNy2uDn/XRRx/FrrvuGpdcckmMGjVqg9tUV1dHdXV17fWqqqro1q1bVFZWRvv27QvWGwBNVzE+aLN1E5SgNFVVVUWHDh0alA1y3qP0ne98JyIixo8fv95tZWVlsXbt2lwfssHatm0b++67b8ybN2+j25SXl0d5eXnBegAAAJq+nI9Rqqmp2eilkCEp4p97i15//fXo2rVrQesAAACfbyX9g7M//OEPY9q0abFw4cJ48cUX4xvf+EZUVVXF8OHDi90aAADQhG1WUJo2bVoMHTo0evXqFbvttlsMGzYsnn766Xz3Fu+8806cfPLJsccee8Txxx8frVq1ihdeeCG6d++e91oAAADr5HyM0h133BFnnnlmHH/88TFy5MhIKcVzzz0XRxxxRNx2221xyimn5K25u+++O2+PBQAA0FA5n/Vur732inPOOSe+//3v11m/7rrr4uabb47XX389rw1uqVzObAEAG+Ksd+TKWe+gNOWSDXL+6t2CBQti6NCh660PGzYsFi5cmOvDAQAAlJycg1K3bt1i6tSp661PnTo1unXrlpemAAAAiinnY5R+8IMfxMiRI2P27Nlx4IEHRllZWTzzzDNx2223xb//+78XokcAAIBGlXNQ+u53vxtdunSJa6+9Nv74xz9GxD+PW7rnnnvi2GOPzXuDAAAAjS3noBQR8fWvfz2+/vWv57sXAACAkpDzMUpLliyJd955p/b6Sy+9FBdddFHcdNNNeW0MAACgWHIOSqeccko88cQTERGxfPnyGDhwYLz00ktx2WWXxfjx4/PeIAAAQGPLOSjNnTs3vvKVr0RExB//+MfYd99947nnnos777wzbrvttnz3BwAA0OhyDkqrV6+O8vLyiIh4/PHHY9iwYRERseeee8ayZcvy2x0AAEAR5ByUevfuHb/61a/i6aefjilTpsTXvva1iIh49913o2PHjnlvEAAAoLHlHJR++tOfxq9//es49NBD4+STT46+fftGRMSDDz5Y+5U8AACArVlOpwdPKUXPnj3j7bffjrVr18YXv/jF2tvOOeec2GabbfLeIAAAQGPLaY9SSil22223eO+99+qEpIiIHj16RKdOnfLaHAAAQDHkFJSaNWsWu+22W/zf//1fofoBAAAoupyPUfrZz34WF198ccydO7cQ/QAAABRdTscoRUScdtpp8fHHH0ffvn2jVatW0aZNmzq3v//++3lrDgAAoBhyDkqTJk0qQBsAAAClI+egNHz48EL0AQAAUDJyPkYpIuKtt96KK664Ik4++eRYsWJFREQ88sgj8eqrr+a1OQAAgGLIOShNmzYt9t1333jxxRfjvvvui1WrVkVExCuvvBJXXnll3hsEAABobDkHpdGjR8dVV10VU6ZMiVatWtWuH3bYYfH888/ntTkAAIBiyDkozZkzJ77+9a+vt77DDjv4fSUAAKBJyDkobbvttrFs2bL11mfNmhU77rhjXpoCAAAoppyD0imnnBKXXnppLF++PMrKyqKmpiaeffbZ+OEPfxinn356IXoEAABoVDkHpQkTJsTOO+8cO+64Y6xatSr23nvvOOSQQ+LAAw+MK664ohA9AgAANKqcf0epZcuW8Yc//CHGjx8fs2bNipqamvjyl78cu+22WyH6AwAAaHQ5B6V1dt1119hll10iIqKsrCxvDQEAABTbZv3g7C233BL77LNPtG7dOlq3bh377LNP/OY3v8l3bwAAAEWR8x6lH/3oR3H99dfHBRdcEP3794+IiOeffz6+//3vx6JFi+Kqq67Ke5MAAACNKeegNHny5Lj55pvj5JNPrl0bNmxY9OnTJy644AJBCQAA2Orl/NW7tWvXxv7777/eer9+/WLNmjV5aQoAAKCYcg5Kp512WkyePHm99ZtuuilOPfXUvDQFAABQTFt0Moezzz47zj777Nhnn33i5ptvjmbNmsWoUaNqL/k2ceLEKCsri4suuijvjw0AALBOzscozZ07N/bbb7+IiHjrrbciImKHHXaIHXbYIebOnVu7Xb5PGT59+vS46aabok+fPnl9XAAAgKycg9ITTzxRiD42adWqVXHqqafGzTff7GQRAABAwW3WV+8a24gRI2LIkCExcODAeretrq6OqqqqOhcAAIBc5LxHqbHdfffdMXPmzJg+fXqDtp84cWKMGzeuwF0BAABNWUnvUVqyZElceOGFcccdd0Tr1q0bdJ8xY8ZEZWVl7WXJkiUF7hIAAGhqSnqP0owZM2LFihXRr1+/2rW1a9fGU089FTfeeGNUV1dH8+bN69ynvLw8ysvLG7tVAACgCSnpoHTEEUfEnDlz6qydeeaZseeee8all166XkgCAADIh5IOSu3atYt99tmnzlrbtm2jY8eO660DAADkS0kfowQAAFAMJb1HaUOefPLJYrcAAAA0cfYoAQAAZAhKAAAAGYISAABAhqAEAACQISgBAABkCEoAAAAZghIAAECGoAQAAJAhKAEAAGQISgAAABmCEgAAQIagBAAAkCEoAQAAZAhKAAAAGYISAABAhqAEAACQISgBAABkCEoAAAAZghIAAECGoAQAAJAhKAEAAGQISgAAABmCEgAAQIagBAAAkCEoAQAAZAhKAAAAGYISAABAhqAEAACQISgBAABkCEoAAAAZghIAAECGoAQAAJAhKAEAAGSUdFCaPHly9OnTJ9q3bx/t27eP/v37x1/+8pditwUAADRxJR2Udtppp7jmmmvi5ZdfjpdffjkOP/zwOPbYY+PVV18tdmsAAEAT1qLYDWzK0KFD61yfMGFCTJ48OV544YXo3bt3kboCAACaupIOSp+1du3a+M///M/46KOPon///hvdrrq6Oqqrq2uvV1VVNUZ7AABAE1LyQWnOnDnRv3//+Mc//hFf+MIX4v7774+99957o9tPnDgxxo0b14gdApSWHqMfKnYLALDVK+ljlCIi9thjj5g9e3a88MIL8d3vfjeGDx8er7322ka3HzNmTFRWVtZelixZ0ojdAgAATUHJ71Fq1apV9OrVKyIi9t9//5g+fXr8+7//e/z617/e4Pbl5eVRXl7emC0CAABNTMnvUcpKKdU5BgkAACDfSnqP0mWXXRaDBw+Obt26xcqVK+Puu++OJ598Mh555JFitwYAADRhJR2U3nvvvfjWt74Vy5Ytiw4dOkSfPn3ikUceiSOPPLLYrQEAAE1YSQelW265pdgtAAAAn0Nb3TFKAAAAhSYoAQAAZAhKAAAAGYISAABAhqAEAACQISgBAABkCEoAAAAZghIAAECGoAQAAJAhKAEAAGQISgAAABmCEgAAQIagBAAAkCEoAQAAZAhKAAAAGYISAABAhqAEAACQISgBAABkCEoAAAAZghIAAECGoAQAAJAhKAEAAGQISgAAABmCEgAAQIagBAAAkCEoAQAAZAhKAAAAGYISAABAhqAEAACQISgBAABkCEoAAAAZghIAAECGoAQAAJBR0kFp4sSJccABB0S7du2iU6dOcdxxx8Ubb7xR7LYAAIAmrqSD0rRp02LEiBHxwgsvxJQpU2LNmjUxaNCg+Oijj4rdGgAA0IS1KHYDm/LII4/UuX7rrbdGp06dYsaMGXHIIYcUqSsAAKCpK+mglFVZWRkREdttt91Gt6muro7q6ura61VVVQXvCwAAaFrKUkqp2E00REopjj322Pjggw/i6aef3uh2Y8eOjXHjxq23XllZGe3bty9kiwAb1GP0Q8VuAWjiFl0zpNgtwFahqqoqOnTo0KBsUNLHKH3W+eefH6+88krcddddm9xuzJgxUVlZWXtZsmRJI3UIAAA0FVvFV+8uuOCCePDBB+Opp56KnXbaaZPblpeXR3l5eSN1BgAANEUlHZRSSnHBBRfE/fffH08++WT07Nmz2C0BAACfAyUdlEaMGBF33nln/Nd//Ve0a9culi9fHhERHTp0iDZt2hS5OwAAoKkq6WOUJk+eHJWVlXHooYdG165day/33HNPsVsDAACasJLeo7SVnJAPAABoYkp6jxIAAEAxCEoAAAAZghIAAECGoAQAAJAhKAEAAGQISgAAABmCEgAAQIagBAAAkCEoAQAAZAhKAAAAGYISAABAhqAEAACQISgBAABkCEoAAAAZghIAAECGoAQAAJAhKAEAAGQISgAAABmCEgAAQIagBAAAkCEoAQAAZAhKAAAAGYISAABAhqAEAACQISgBAABkCEoAAAAZghIAAECGoAQAAJAhKAEAAGQISgAAABmCEgAAQIagBAAAkCEoAQAAZJR8UHrqqadi6NChUVFREWVlZfHAAw8UuyUAAKCJK/mg9NFHH0Xfvn3jxhtvLHYrAADA50SLYjdQn8GDB8fgwYOL3QYAAPA5UvJBKVfV1dVRXV1de72qqqqI3QAAAFujJheUJk6cGOPGjSt2GwAAjabH6Icatd6ia4Y0aj0ohpI/RilXY8aMicrKytrLkiVLit0SAACwlWlye5TKy8ujvLy82G0AAABbsSa3RwkAAGBLlfwepVWrVsX8+fNrry9cuDBmz54d2223Xey8885F7AwAAGiqSj4ovfzyy3HYYYfVXh81alRERAwfPjxuu+22InUFAAA0ZSUflA499NBIKRW7DQAA4HPEMUoAAAAZghIAAECGoAQAAJAhKAEAAGQISgAAABmCEgAAQIagBAAAkCEoAQAAZAhKAAAAGYISAABAhqAEAACQISgBAABkCEoAAAAZghIAAECGoAQAAJAhKAEAAGQISgAAABmCEgAAQIagBAAAkCEoAQAAZAhKAAAAGYISAABAhqAEAACQISgBAABkCEoAAAAZghIAAECGoAQAAJAhKAEAAGQISgAAABmCEgAAQIagBAAAkCEoAQAAZAhKAAAAGVtFUPrlL38ZPXv2jNatW0e/fv3i6aefLnZLAABAE1byQemee+6Jiy66KC6//PKYNWtW/L//9/9i8ODBsXjx4mK3BgAANFElH5Suu+66+Pa3vx1nn3127LXXXjFp0qTo1q1bTJ48uditAQAATVSLYjewKZ9++mnMmDEjRo8eXWd90KBB8dxzz23wPtXV1VFdXV17vbKyMiIiqqqqCtcowCbUVH9c7BYA8srnKrZW62Y3pVTvtiUdlP73f/831q5dG507d66z3rlz51i+fPkG7zNx4sQYN27ceuvdunUrSI8AAJ83HSYVuwPYMitXrowOHTpscpuSDkrrlJWV1bmeUlpvbZ0xY8bEqFGjaq/X1NTE+++/Hx07dtzofRpLVVVVdOvWLZYsWRLt27dvcvWKUVO9rbteMWqqp16p11Rv665XjJrqqVfqNYvxHDcmpRQrV66MioqKerct6aC0/fbbR/Pmzdfbe7RixYr19jKtU15eHuXl5XXWtt1220K1uFnat2/fqEPS2PWKUVO9rbteMWqqp16p11Rv665XjJrqqVfqNYvxHDekvj1J65T0yRxatWoV/fr1iylTptRZnzJlShx44IFF6goAAGjqSnqPUkTEqFGj4lvf+lbsv//+0b9//7jpppti8eLFcd555xW7NQAAoIkq+aB00kknxf/93//F+PHjY9myZbHPPvvEww8/HN27dy92azkrLy+PK6+8cr2vBjaVesWoqd7WXa8YNdVTr9Rrqrd11ytGTfXUK/WaxXiO+VCWGnJuPAAAgM+Rkj5GCQAAoBgEJQAAgAxBCQAAIENQAgAAyBCUGtEvf/nL6NmzZ7Ru3Tr69esXTz/9dKPUnThxYpSVlcVFF11UkMdfs2ZNXHHFFdGzZ89o06ZN7LLLLjF+/PioqanJy+M/9dRTMXTo0KioqIiysrJ44IEHam9bvXp1XHrppbHvvvtG27Zto6KiIk4//fR49913C1Zznddffz2GDRsWHTp0iHbt2sW//Mu/xOLFi3OuNXHixDjggAOiXbt20alTpzjuuOPijTfeqLNNSinGjh0bFRUV0aZNmzj00EPj1Vdf3azn1pB6n3XuuedGWVlZTJo0abPqNbTmqlWr4vzzz4+ddtop2rRpE3vttVdMnjx5s+pNnjw5+vTpU/vDdv3794+//OUvEVGYmdlUvXXyNS8bsqG/8XzOTEPqfVY+Zqa+evmcl4iIsWPHRllZWZ1Lly5dIqIwM7Opeuvke2aWLl0ap512WnTs2DG22Wab+NKXvhQzZsyovT3fM1Nfvc/Kx8zUVy/fM9OjR4/1/huWlZXFiBEjCjIzm6q3Tj5npiHv7fmcmVw/S2zpzDSkXr5nZuXKlXHRRRdF9+7do02bNnHggQfG9OnTI6Jwn2c2VXOdzZ2b+j4rNWQ+qqur44ILLojtt98+2rZtG8OGDYt33nlni55zXiUaxd13351atmyZbr755vTaa6+lCy+8MLVt2za9/fbbBa370ksvpR49eqQ+ffqkCy+8sCA1rrrqqtSxY8f05z//OS1cuDD953/+Z/rCF76QJk2alJfHf/jhh9Pll1+e7r333hQR6f7776+97cMPP0wDBw5M99xzT/qf//mf9Pzzz6evfvWrqV+/fgWrmVJK8+fPT9ttt126+OKL08yZM9Nbb72V/vznP6f33nsv51pHHXVUuvXWW9PcuXPT7Nmz05AhQ9LOO++cVq1aVbvNNddck9q1a5fuvffeNGfOnHTSSSelrl27pqqqqoLUW+f+++9Pffv2TRUVFen666/PuVYuNc8+++y06667pieeeCItXLgw/frXv07NmzdPDzzwQM71HnzwwfTQQw+lN954I73xxhvpsssuSy1btkxz584tyMxsql5K+Z2XrI39jedzZhpSb518zUx99fI5LymldOWVV6bevXunZcuW1V5WrFiRUirM68ym6qWU/5l5//33U/fu3dMZZ5yRXnzxxbRw4cL0+OOPp/nz59duk8+ZaUi9dfIxMw2pl++ZWbFiRZ3/flOmTEkRkZ544omCzMym6qWU/5lpyHt7Pmcml88S+ZiZhtTL98yceOKJae+9907Tpk1L8+bNS1deeWVq3759eueddwr2eWZTNVPasrmp77NSQ+bjvPPOSzvuuGOaMmVKmjlzZjrssMNS375905o1a7boeeeLoNRIvvKVr6Tzzjuvztqee+6ZRo8eXbCaK1euTLvttluaMmVKGjBgQMGC0pAhQ9JZZ51VZ+34449Pp512Wt5rbegPMeull15KEZG3ELqhmieddFJBnl9K/3wzjIg0bdq0lFJKNTU1qUuXLumaa66p3eYf//hH6tChQ/rVr36V93rrvPPOO2nHHXdMc+fOTd27d8/Lh95N1ezdu3caP358ne3222+/dMUVV+Sl5he/+MX0m9/8ZoO35XtmsvUKNS8b+xsv1MzU95qS75nZVL18z8uVV16Z+vbt2+Dtt3Rm6quX75m59NJL08EHH7zR2/M9M/XVWydfM9OQeoV+jbnwwgvTrrvummpqajZ4e75fZ7L18j0z9b2353tmGvpZIl8z05B6+ZyZjz/+ODVv3jz9+c9/rrPet2/fdPnll2/wPls6Mw2pma+5yX5Wash8fPjhh6lly5bp7rvvrt1m6dKlqVmzZumRRx7Z4p7ywVfvGsGnn34aM2bMiEGDBtVZHzRoUDz33HMFqztixIgYMmRIDBw4sGA1IiIOPvjgmDp1arz55psREfG3v/0tnnnmmTj66KMLWndjKisro6ysLLbddtuCPH5NTU089NBDsfvuu8dRRx0VnTp1iq9+9asb/Hre5qisrIyIiO222y4iIhYuXBjLly+vMz/l5eUxYMCAvMxPtl7EP5/jt771rbj44oujd+/eW1yjITUPPvjgePDBB2Pp0qWRUoonnngi3nzzzTjqqKO2qNbatWvj7rvvjo8++ij69++/0X7yNTPZeoWcl439jRdqZjb1mlKImdlUvULMy7x586KioiJ69uwZ3/zmN2PBggUb3TYfM7OxeoWYmQcffDD233//OOGEE6JTp07x5S9/OW6++eba2/M9M/XVW/c88zUzDalXqNeYiH++z99xxx1x1llnRVlZ2Qa3yefrTLZeIWamvvf2fM9MQz5L5HNmGlIvnzOzZs2aWLt2bbRu3brOeps2beKZZ57Z4H22dGbqq1nI96eGzMeMGTNi9erVdbapqKiIffbZp6Cfj3NS3Jz2+bB06dIUEenZZ5+tsz5hwoS0++67F6TmXXfdlfbZZ5/0ySefpJRSQfco1dTUpNGjR6eysrLUokWLVFZWlq6++uqC1Ip69ih98sknqV+/funUU08tWM1ly5aliEjbbLNNuu6669KsWbPSxIkTU1lZWXryySe3qFZNTU0aOnRonX8ZffbZZ1NEpKVLl9bZ9jvf+U4aNGhQ3uullNLVV1+djjzyyNp/qcznHqWN1ayurk6nn356iojUokWL1KpVq/S73/1us+u88sorqW3btql58+apQ4cO6aGHHtrgdvmamY3VK9S8bOpvvBAzU99rSr5npr56+Z6Xhx9+OP3pT39Kr7zySu0erM6dO6f//d//XW/bfMzMpuoVYmbKy8tTeXl5GjNmTJo5c2b61a9+lVq3bp1uv/32lFL+Z6a+einld2YaUi/fM/NZ99xzT2revPl6//+tk+/3pmy9QsxMfe/t+Z6ZhnyWyOfMNKRevmemf//+acCAAWnp0qVpzZo16fe//30qKyvb4GfBfM3Mpmrmc26yn5UaMh9/+MMfUqtWrdZ7rCOPPDKdc845uT/ZAhCUGsG6oPTcc8/VWb/qqqvSHnvskfd6ixcvTp06dUqzZ8+uXStkULrrrrvSTjvtlO666670yiuvpN/97ndpu+22S7fddlvea20qKH366afp2GOPTV/+8pdTZWVlwWqu++958skn19lu6NCh6Zvf/OYW1fre976XunfvnpYsWVK7tu7F5t13362z7dlnn52OOuqovNd7+eWXU+fOneu8uOUzKG2oZkop/du//Vvafffd04MPPpj+9re/pRtuuCF94QtfSFOmTNmsOtXV1WnevHlp+vTpafTo0Wn77bdPr776ap1t8jkzG6tXiHmp72883zNTX718z0xDXsPyPS9Zq1atSp07d07XXnttnfVCvc58tl4hZqZly5apf//+ddYuuOCC9C//8i8ppfzPTH318j0z9dVLqbAzM2jQoHTMMcds8LZCzEy2XiFmpr739nzPTH318j0zDfnsku+ZmT9/fjrkkENSRKTmzZunAw44IJ166qlpr732qrNdPmdmUzXzOTcbC0qbmo+NBaWBAwemc889N6f6hSIoNYLq6urUvHnzdN9999VZHzlyZDrkkEPyXu/++++v/YNYd4mIVFZWlpo3b573A+R22mmndOONN9ZZ+8lPflKQELixoPTpp5+m4447LvXp02eD/wKcz5rV1dWpRYsW6Sc/+Umd7S655JJ04IEHbnad888/P+20005pwYIFddbfeuutFBFp5syZddaHDRuWTj/99LzXu/7662tn5bPz06xZs9S9e/fNrrepmh9//HFq2bLlet+j/va3v73FYXCdI444os6/UBVyZj5brxDzUt/f+Pz58/M6M/XV+/nPf57Xmamv3qpVqwo+Lyn98836s8eWFnpm1tUrxMzsvPPO6dvf/nadtV/+8pepoqIipZT/15n66uX7daa+eoV8jVm0aFFq1qzZBg/wL8TMbKheIWamvvf2fM9MffXyPTP11SvkzKxatao2QJx44onp6KOPrr2tUK8zG6qZz7nJflZqyHxMnTo1RUR6//3362zTp0+f9OMf/zin+oXiGKVG0KpVq+jXr19MmTKlzvqUKVPiwAMPzHu9I444IubMmROzZ8+uvey///5x6qmnxuzZs6N58+Z5rffxxx9Hs2Z1R6l58+Z5Oz14fVavXh0nnnhizJs3Lx5//PHo2LFjQeu1atUqDjjggPVOb/3mm29G9+7dc368lFKcf/75cd9998Vf//rX6NmzZ53be/bsGV26dKkzP59++mlMmzZts+anvnrf+ta34pVXXqkzPxUVFXHxxRfHo48+mnO9htRcvXp1rF69uqBzlFKK6urq2nqFnpl19fI9LxH1/43vsssueZ2Z+uqdccYZeZ2Z+uqtXbu24PNSXV0dr7/+enTt2jUiCj8zn61XiJk56KCDNvl4+X6dqa9evl9n6qtXyNeYW2+9NTp16hRDhgyps16omdlQvULMTH3v7fmemfrq5Xtm6qtXyJlp27ZtdO3aNT744IN49NFH49hjj62tWajXmQ3VLMTcrNOQ+ejXr1+0bNmyzjbLli2LuXPnFuTz8WYpakz7HFl3evBbbrklvfbaa+miiy5Kbdu2TYsWLWqU+oX86t3w4cPTjjvuWHuKzfvuuy9tv/326ZJLLsnL469cuTLNmjUrzZo1K0VE7fdo33777bR69eo0bNiwtNNOO6XZs2fXOXVqdXV1QWqmlNJ9992XWrZsmW666aY0b968dMMNN6TmzZunp59+Ouda3/3ud1OHDh3Sk08+Waf/jz/+uHaba665JnXo0CHdd999ac6cOenkk0/e7FOwNqRe1pZ+9a4hNQcMGJB69+6dnnjiibRgwYJ06623ptatW6df/vKXOdcbM2ZMeuqpp9LChQvTK6+8ki677LLUrFmz9NhjjxVkZjZVL6X8zsvGZP/G8zkzDamXle8zJWbr5XNeUkrpBz/4QXryySfTggUL0gsvvJCOOeaY1K5du7Ro0aKCzMym6qWU/5l56aWXUosWLdKECRPSvHnz0h/+8Ie0zTbbpDvuuKN2m3zOTEPqZW3JzDSkXr5nJqWU1q5dm3beeed06aWX1lkv1HvTxuqllP+Zach7ez5nZnM+S2zJzDSkXr5n5pFHHkl/+ctf0oIFC9Jjjz2W+vbtm77yla+kTz/9tGAzs6maKW3Z3NT3Wakh83HeeeelnXbaKT3++ONp5syZ6fDDD3d68M+r//iP/0jdu3dPrVq1Svvtt996p2MupEIGpaqqqnThhRemnXfeObVu3Trtsssu6fLLL9+iP+zPeuKJJ1JErHcZPnx4Wrhw4QZvi8/8tkS+a65zyy23pF69eqXWrVunvn37bvbvKmys/1tvvbV2m5qamnTllVemLl26pPLy8nTIIYekOXPmFKxe1pZ+6G1IzWXLlqUzzjgjVVRUpNatW6c99tgjXXvttRs91e6mnHXWWbV/azvssEM64ogjakNLIWZmU/XWyde8bEz2bzyfM9OQelmFDkr5nJeUUu3ve7Rs2TJVVFSk448/vvaYtkLMzKbqrZPvmfnv//7vtM8++6Ty8vK05557pptuuqnO7fmemfrqZW3pzNRXL98zk1JKjz76aIqI9MYbb9RZL9R708bqrZPPmWnIe3s+Z2ZzPktsycw0pF6+Z+aee+5Ju+yyS2rVqlXq0qVLGjFiRPrwww9TSoWbmU3VXGdz56a+z0oNmY9PPvkknX/++Wm77bZLbdq0Scccc0xavHjxZj/ffCtLKaUt2ycFAADQtDhGCQAAIENQAgAAyBCUAAAAMgQlAACADEEJAAAgQ1ACAADIEJQAAAAyBCUAAIAMQQkAACBDUAKAz1i9enWxWwCgBAhKAGwV/vSnP8W+++4bbdq0iY4dO8bAgQPjo48+ioiI3/72t9G7d+8oLy+Prl27xvnnn197v8WLF8exxx4bX/jCF6J9+/Zx4oknxnvvvVd7+9ixY+NLX/pS/Pa3v41ddtklysvLI6UUlZWVcc4550SnTp2iffv2cfjhh8ff/va3Rn/eABSHoARAyVu2bFmcfPLJcdZZZ8Xrr78eTz75ZBx//PGRUorJkyfHiBEj4pxzzok5c+bEgw8+GL169YqIiJRSHHfccfH+++/HtGnTYsqUKfHWW2/FSSedVOfx58+fH3/84x/j3nvvjdmzZ0dExJAhQ2L58uXx8MMPx4wZM2K//faLI444It5///3GfvoAFEFZSikVuwkA2JSZM2dGv379YtGiRdG9e/c6t+24445x5plnxlVXXbXe/aZMmRKDBw+OhQsXRrdu3SIi4rXXXovevXvHSy+9FAcccECMHTs2rr766li6dGnssMMOERHx17/+Nb7+9a/HihUrory8vPbxevXqFZdcckmcc845BXy2AJSCFsVuAADq07dv3zjiiCNi3333jaOOOioGDRoU3/jGN2L16tXx7rvvxhFHHLHB+73++uvRrVu32pAUEbH33nvHtttuG6+//noccMABERHRvXv32pAUETFjxoxYtWpVdOzYsc7jffLJJ/HWW28V4BkCUGoEJQBKXvPmzWPKlCnx3HPPxWOPPRY33HBDXH755TF16tRN3i+lFGVlZfWut23bts7tNTU10bVr13jyySfXu++22267Wc8BgK2LoATAVqGsrCwOOuigOOigg+LHP/5xdO/ePaZMmRI9evSIqVOnxmGHHbbeffbee+9YvHhxLFmypM5X7yorK2OvvfbaaK399tsvli9fHi1atIgePXoU6ikBUMIEJQBK3osvvhhTp06NQYMGRadOneLFF1+Mv//977HXXnvF2LFj47zzzotOnTrF4MGDY+XKlfHss8/GBRdcEAMHDow+ffrEqaeeGpMmTYo1a9bE9773vRgwYEDsv//+G603cODA6N+/fxx33HHx05/+NPbYY49499134+GHH47jjjtuk/cFoGkQlAAoee3bt4+nnnoqJk2aFFVVVdG9e/e49tprY/DgwRER8Y9//COuv/76+OEPfxjbb799fOMb34iIf+6FeuCBB+KCCy6IQw45JJo1axZf+9rX4oYbbthkvbKysnj44Yfj8ssvj7POOiv+/ve/R5cuXeKQQw6Jzp07F/z5AlB8znoHAACQ4XeUAAAAMgQlAACADEEJAAAgQ1ACAADIEJQAAAAyBCUAAIAMQQkAACBDUAIAAMgQlAAAADIEJQAAgAxBCQAAIENQAgAAyPj/cLlCEfFFoI0AAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(10, 6))\n",
    "ax = fig.add_subplot(111)\n",
    "\n",
    "freq, _ , _ = ax. hist(english_scores, bins=25, range=(0, 100))\n",
    "ax.set_xlabel('score')\n",
    "ax.set_ylabel('person number')\n",
    "ax.set_xticks(np.linspace(0, 100, 25+1))\n",
    "ax.set_yticks(np.arange(0, freq.max()+1))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fbff4a3f-d6f8-4c01-97ef-1016a361dc3f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
